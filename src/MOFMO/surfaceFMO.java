package MOFMO;

import java.util.ArrayList;

import IMRT_DAO.TreatmentPlan;

public class surfaceFMO {

	ArrayList<double []> extremeSolution;/*This list only contain the extreme points  the first point have de less x value*/
	ArrayList<double []> allSolution;/*This list contain all the solution generated by the surface */
	ArrayList<Integer>BACs;
	

	public surfaceFMO(ArrayList<double []> a) {
		extremeSolution=new ArrayList<double []> ();

		allSolution=new ArrayList<double []> ();
		extremeSolution.addAll(a);
		allSolution.add(a.get(0));
		allSolution.add(generatePointWithExtreme(0.1));
		allSolution.add(generatePointWithExtreme(0.2));
		allSolution.add(generatePointWithExtreme(0.3));
		allSolution.add(generatePointWithExtreme(0.4));
		allSolution.add(generatePointWithExtreme(0.5));
		allSolution.add(generatePointWithExtreme(0.6));
		allSolution.add(generatePointWithExtreme(0.7));
		allSolution.add(generatePointWithExtreme(0.8));
		allSolution.add(generatePointWithExtreme(0.9));

		allSolution.add(a.get(1));

		
		}
	

	

	


	
	
	/* Function to do the linear combination between two treatment plan */

	
	public double [] generatePointWithExtreme(double percent) {
		return DAOCrossingGeneration(extremeSolution.get(0),extremeSolution.get(1),percent);
	}

	private double [] DAOCrossingGeneration(double [] one,double [] two, double percent) {

		return intensitiesLinearCombination(one, two, percent);
		
	}
	
	
	/**
	 * This function made a linear combination of the two intensities
	 * Consider that the function only work with itnensities that have the same number of bac and same number  of apertures for all bacs
	 * @param a
	 * @param b
	 * @param alfa
	 * @return
	 */
	private double [] intensitiesLinearCombination(double [] a,double [] b,double alfa){
		double []linearCombination=new double [a.length];
		for(int i=0;i<a.length;i++) {
			linearCombination[i]=(alfa*a[i])+((1-alfa)*b[i]);
			
		}
		return linearCombination;
	}
	



	
	
	
	
}
